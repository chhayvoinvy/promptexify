generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id     String        @id @default(uuid())
  email  String        @unique
  name   String?
  avatar String?
  type   UserType      @default(FREE)
  role   UserRole      @default(USER)
  oauth  OAuthProvider

  // Stripe fields
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookmarks Bookmark[]
  favorites Favorite[]
  posts     Post[]

  @@index([email])
  @@index([stripeCustomerId])
  @@index([type, role])
  @@index([createdAt(sort: Desc)])
  @@map("users")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  posts       Post[]

  @@index([parentId])
  @@index([name])
  @@index([slug])
  @@index([parentId, name])
  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToTag")

  @@index([name])
  @@index([slug])
  @@index([createdAt(sort: Desc)])
  @@map("tags")
}

model Post {
  id            String     @id @default(uuid())
  title         String
  slug          String
  description   String?
  content       String
  featuredImage String?
  featuredVideo String?
  isPremium     Boolean    @default(false)
  isFeatured    Boolean    @default(false)
  isPublished   Boolean    @default(false)
  status        PostStatus @default(DRAFT)
  viewCount     Int        @default(0)
  authorId      String
  categoryId    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bookmarks     Bookmark[]
  favorites     Favorite[]
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category      Category   @relation(fields: [categoryId], references: [id])
  views         View[]
  tags          Tag[]      @relation("PostToTag")

  @@index([isPublished, createdAt(sort: Desc)])
  @@index([categoryId, isPublished, createdAt(sort: Desc)])
  @@index([authorId, createdAt(sort: Desc)])
  @@index([isPremium, isPublished])
  @@index([isFeatured, isPublished])
  @@index([status, createdAt(sort: Desc)])
  @@index([title])
  @@index([isPublished, isPremium, createdAt(sort: Desc)])
  @@index([slug])
  @@index([viewCount(sort: Desc)])
  @@index([isPublished, viewCount(sort: Desc)])
  @@index([categoryId, isPublished, viewCount(sort: Desc)])
  @@index([authorId, status])
  @@index([isPublished, createdAt(sort: Desc), isPremium])
  @@map("posts")
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([postId])
  @@index([userId, postId])
  @@map("bookmarks")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([postId])
  @@index([postId, createdAt(sort: Desc)])
  @@index([userId, postId])
  @@map("favorites")
}

model View {
  id        String   @id @default(uuid())
  postId    String
  ipAddress String
  userAgent String?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, ipAddress])
  @@index([postId, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([postId])
  @@index([ipAddress])
  @@index([createdAt(sort: Desc), postId])
  @@map("views")
}

model Log {
  id         String   @id @default(uuid())
  action     String
  userId     String?
  entityType String
  entityId   String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  severity   String
  createdAt  DateTime @default(now())

  @@index([createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@index([severity, createdAt(sort: Desc)])
  @@index([entityType, entityId])
  @@map("logs")
}

enum UserType {
  FREE
  PREMIUM
}

enum UserRole {
  USER
  ADMIN
}

enum OAuthProvider {
  GOOGLE
  EMAIL
}

enum PostStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
}
