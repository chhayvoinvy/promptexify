generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String        @id @default(uuid())
  email                  String        @unique
  name                   String?
  avatar                 String?
  type                   UserType      @default(FREE)
  role                   UserRole      @default(USER)
  oauth                  OAuthProvider
  stripeCustomerId       String?       @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?       @unique @map("stripe_subscription_id")
  stripePriceId          String?       @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?     @map("stripe_current_period_end")
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  bookmarks              Bookmark[]
  favorites              Favorite[]
  posts                  Post[]

  @@index([id, role])
  @@index([id, type, stripeCurrentPeriodEnd])
  @@index([email])
  @@index([stripeCustomerId])
  @@index([type, role])
  @@index([createdAt(sort: Desc)])
  @@map("users")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  posts       Post[]

  @@index([parentId])
  @@index([name])
  @@index([slug])
  @@index([parentId, name])
  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToTag")

  @@index([name])
  @@index([slug])
  @@index([createdAt(sort: Desc)])
  @@map("tags")
}

model Post {
  id             String          @id @default(uuid())
  title          String
  slug           String          @unique
  description    String?
  content        String
  isPremium      Boolean         @default(false)
  isFeatured     Boolean         @default(false)
  isPublished    Boolean         @default(false)
  status         PostStatus      @default(DRAFT)
  authorId       String
  categoryId     String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  blurData       String?
  uploadFileType UploadFileType?
  uploadPath     String?
  previewPath    String?         // Preview image path for public serving
  bookmarks      Bookmark[]
  favorites      Favorite[]
  media          Media[]
  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category       Category        @relation(fields: [categoryId], references: [id])
  views          View[]
  tags           Tag[]           @relation("PostToTag")

  @@index([isPublished, createdAt(sort: Desc)])
  @@index([categoryId, isPublished, createdAt(sort: Desc)])
  @@index([authorId, createdAt(sort: Desc)])
  @@index([isPremium, isPublished])
  @@index([isFeatured, isPublished])
  @@index([status, createdAt(sort: Desc)])
  @@index([title])
  @@index([isPublished, isPremium, createdAt(sort: Desc)])
  @@index([slug])
  @@index([authorId, status])
  @@index([isPublished, createdAt(sort: Desc), isPremium])
  @@index([authorId, isPublished, status])
  @@index([isFeatured, isPremium, isPublished, createdAt(sort: Desc)])
  @@index([authorId, status, createdAt(sort: Desc)])
  @@index([previewPath]) // Index for preview path queries
  @@map("posts")
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([postId])
  @@map("bookmarks")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([postId])
  @@index([postId, createdAt(sort: Desc)])
  @@map("favorites")
}

model View {
  id        String   @id @default(uuid())
  postId    String
  ipAddress String
  userAgent String?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, ipAddress])
  @@index([postId, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([postId])
  @@index([ipAddress])
  @@map("views")
}

model Log {
  id         String   @id @default(uuid())
  action     String
  userId     String?
  entityType String
  entityId   String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  severity   String
  createdAt  DateTime @default(now())

  @@index([createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@index([severity, createdAt(sort: Desc)])
  @@index([entityType, entityId])
  @@index([severity, action, createdAt(sort: Desc)])
  @@index([userId, action, createdAt(sort: Desc)])
  @@map("logs")
}

model Media {
  id                  String      @id @default(uuid())
  filename            String      @unique
  relativePath        String
  originalName        String
  mimeType            String
  fileSize            Int
  width               Int?
  height              Int?
  duration            Float?
  storageType         StorageType @default(S3)
  uploadedBy          String
  postId              String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  blurDataUrl         String?
  post                Post?       @relation(fields: [postId], references: [id], onDelete: SetNull)

  @@index([filename])
  @@index([relativePath])
  @@index([postId])
  @@index([uploadedBy])
  @@index([storageType])
  @@index([mimeType])
  @@index([createdAt(sort: Desc)])
  @@map("media")
}

model Settings {
  id                 String      @id @default(uuid())
  storageType        StorageType @default(S3)
  s3BucketName       String?
  s3Region           String?
  s3AccessKeyId      String?
  s3SecretKey        String?
  s3CloudfrontUrl    String?
  doSpaceName        String?
  doRegion           String?
  doAccessKeyId      String?
  doSecretKey        String?
  doCdnUrl           String?
  localBasePath      String?     @default("/uploads")
  localBaseUrl       String?     @default("/uploads")
  maxImageSize       Int         @default(2097152)
  maxVideoSize       Int         @default(10485760)
  enableCompression  Boolean     @default(true)
  compressionQuality Int         @default(80)
  maxTagsPerPost     Int         @default(20)
  enableCaptcha      Boolean     @default(false)
  requireApproval    Boolean     @default(true)
  maxPostsPerDay     Int         @default(10)
  maxUploadsPerHour  Int         @default(20)
  enableAuditLogging Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  updatedBy          String
  postsPageSize      Int         @default(12)
  featuredPostsLimit Int         @default(12)

  @@index([storageType])
  @@index([updatedBy])
  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@map("settings")
}

enum UserType {
  FREE
  PREMIUM
}

enum UserRole {
  USER
  ADMIN
}

enum OAuthProvider {
  GOOGLE
  EMAIL
}

enum PostStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

enum UploadFileType {
  IMAGE
  VIDEO
}

enum StorageType {
  S3
  LOCAL
  DOSPACE
}
