generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id     String        @id @default(uuid())
  email  String        @unique
  name   String?
  avatar String?
  type   UserType      @default(FREE)
  role   UserRole      @default(USER)
  oauth  OAuthProvider

  // Stripe fields
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")

  bookmarks Bookmark[]
  favorites Favorite[]
  posts     Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, role])
  @@index([id, type, stripeCurrentPeriodEnd])
  @@index([email])
  @@index([stripeCustomerId])
  @@index([type, role])
  @@index([createdAt(sort: Desc)])
  @@map("users")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  posts       Post[]

  @@index([parentId])
  @@index([name])
  @@index([slug])
  @@index([parentId, name])
  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToTag")

  @@index([name])
  @@index([slug])
  @@index([createdAt(sort: Desc)])
  @@map("tags")
}

model Post {
  id            String     @id @default(uuid())
  title         String
  slug          String
  description   String?
  content       String
  featuredImage String? // Relative path to the featured image
  featuredVideo String? // Relative path to the featured video
  isPremium     Boolean    @default(false)
  isFeatured    Boolean    @default(false)
  isPublished   Boolean    @default(false)
  status        PostStatus @default(DRAFT)

  authorId   String
  categoryId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  bookmarks  Bookmark[]
  favorites  Favorite[]
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   Category   @relation(fields: [categoryId], references: [id])
  views      View[]
  tags       Tag[]      @relation("PostToTag")
  media      Media[]

  @@index([isPublished, createdAt(sort: Desc)])
  @@index([categoryId, isPublished, createdAt(sort: Desc)])
  @@index([authorId, createdAt(sort: Desc)])
  @@index([isPremium, isPublished])
  @@index([isFeatured, isPublished])
  @@index([status, createdAt(sort: Desc)])
  @@index([title])
  @@index([isPublished, isPremium, createdAt(sort: Desc)])
  @@index([slug])
  @@index([authorId, status])
  @@index([isPublished, createdAt(sort: Desc), isPremium])
  @@index([authorId, isPublished, status])
  @@index([isFeatured, isPremium, isPublished, createdAt(sort: Desc)])
  @@index([authorId, status, createdAt(sort: Desc)])
  @@map("posts")
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([postId])
  @@map("bookmarks")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([postId])
  @@index([postId, createdAt(sort: Desc)])
  @@map("favorites")
}

model View {
  id        String   @id @default(uuid())
  postId    String
  ipAddress String
  userAgent String?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, ipAddress])
  @@index([postId, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([postId])
  @@index([ipAddress])
  @@map("views")
}

model Log {
  id         String   @id @default(uuid())
  action     String
  userId     String?
  entityType String
  entityId   String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  severity   String
  createdAt  DateTime @default(now())

  @@index([createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@index([severity, createdAt(sort: Desc)])
  @@index([entityType, entityId])
  @@index([severity, action, createdAt(sort: Desc)])
  @@index([userId, action, createdAt(sort: Desc)])
  @@map("logs")
}

model Media {
  id           String @id @default(uuid())
  filename     String @unique // e.g., "user123-prompt-abc123.avif"
  relativePath String // e.g., "images/user123-prompt-abc123.avif"
  originalName String // Original filename before processing
  mimeType     String // e.g., "image/avif", "video/mp4"
  fileSize     Int // File size in bytes
  width        Int? // Image/video width
  height       Int? // Image/video height
  duration     Float? // Video duration in seconds

  // Storage tracking
  storageType StorageType @default(S3)
  uploadedBy  String // User ID who uploaded

  // Relations
  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([filename])
  @@index([relativePath])
  @@index([postId])
  @@index([uploadedBy])
  @@index([storageType])
  @@index([mimeType])
  @@index([createdAt(sort: Desc)])
  @@map("media")
}

model Settings {
  id String @id @default(uuid())

  // Storage Configuration
  storageType StorageType @default(S3)

  // S3 Configuration
  s3BucketName    String?
  s3Region        String?
  s3AccessKeyId   String?
  s3SecretKey     String? // This should be encrypted in production
  s3CloudfrontUrl String?

  // DigitalOcean Spaces Configuration
  doSpaceName   String?
  doRegion      String?
  doAccessKeyId String?
  doSecretKey   String? // This should be encrypted in production
  doCdnUrl      String?

  // Local Storage Configuration
  localBasePath String? @default("/uploads")
  localBaseUrl  String? @default("/uploads")

  // Upload Limits
  maxImageSize       Int     @default(2097152) // 2MB in bytes
  maxVideoSize       Int     @default(10485760) // 10MB in bytes
  enableCompression  Boolean @default(true)
  compressionQuality Int     @default(80)

  // Content Management
  maxTagsPerPost  Int     @default(20)
  enableCaptcha   Boolean @default(false)
  requireApproval Boolean @default(true)

  // Security & Rate Limiting
  maxPostsPerDay     Int     @default(10)
  maxUploadsPerHour  Int     @default(20)
  enableAuditLogging Boolean @default(true)

  // Future expandable fields can be added here
  // emailNotifications Boolean @default(true)
  // maintenanceMode    Boolean @default(false)
  // etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy String // User ID who last updated settings

  @@index([storageType])
  @@index([updatedBy])
  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@map("settings")
}

// Enums
enum UserType {
  FREE
  PREMIUM
}

enum UserRole {
  USER
  ADMIN
}

enum OAuthProvider {
  GOOGLE
  EMAIL
}

enum PostStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

enum StorageType {
  S3
  LOCAL
  DOSPACE
}
